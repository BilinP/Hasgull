-----------------------------------------------------------------------------
Info file generated by Happy Version 2.0.2 from Parser.y
-----------------------------------------------------------------------------

state 115 contains 1 shift/reduce conflicts.
state 132 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseTokens -> program                      (0)
	program -> programItems stmts                      (1)
	programItems ->                                    (2)
	programItems -> programItem programItems           (3)
	stmts ->                                           (4)
	stmts -> stmt stmts                                (5)
	programItem -> structDef                           (6)
	programItem -> traitDef                            (7)
	programItem -> implDef                             (8)
	programItem -> funcDef                             (9)
	exp -> equalsExp                                   (10)
	equalsExp -> lessThanExp "==" lessThanExp          (11)
	equalsExp -> lessThanExp "!=" lessThanExp          (12)
	equalsExp -> lessThanExp                           (13)
	lessThanExp -> addExp '<' addExp                   (14)
	lessThanExp -> addExp '>' addExp                   (15)
	lessThanExp -> addExp                              (16)
	addExp -> multExp '+' multExp                      (17)
	addExp -> multExp '-' multExp                      (18)
	addExp -> multExp                                  (19)
	multExp -> callExp '*' callExp                     (20)
	multExp -> callExp '/' callExp                     (21)
	multExp -> callExp                                 (22)
	callExp -> dotExp '(' exp ')'                      (23)
	callExp -> dotExp                                  (24)
	dotExp -> primaryExp '.' var                       (25)
	dotExp -> primaryExp                               (26)
	primaryExp -> i                                    (27)
	primaryExp -> var                                  (28)
	primaryExp -> true                                 (29)
	primaryExp -> false                                (30)
	primaryExp -> self                                 (31)
	primaryExp -> '(' exp ')'                          (32)
	primaryExp -> new var '{' structActualParams '}'   (33)
	structActualParams ->                              (34)
	structActualParams -> structActualParam            (35)
	structActualParams -> structActualParam ',' structActualParams   (36)
	structActualParam -> var ':' exp                   (37)
	stmt -> let param '=' exp ';'                      (38)
	stmt -> var '=' exp ';'                            (39)
	stmt -> if '(' exp ')' stmt else stmt              (40)
	stmt -> if '(' exp ')' stmt                        (41)
	stmt -> while '(' exp ')' stmt                     (42)
	stmt -> break ';'                                  (43)
	stmt -> println '(' exp ')'                        (44)
	stmt -> '{' stmts '}'                              (45)
	stmt -> return exp ';'                             (46)
	stmt -> return ';'                                 (47)
	stmt -> exp ';'                                    (48)
	funcDef -> func var '(' commaParam ')' ':' type '{' stmts '}'   (49)
	implDef -> impl var for type '{' concMethodDefs '}'   (50)
	traitDef -> trait var '{' absMethodDefs '}'        (51)
	concMethodDefs -> concMethodDef concMethodDefs     (52)
	concMethodDefs ->                                  (53)
	concMethodDef -> method var '(' commaParam ')' ':' type '{' stmts '}'   (54)
	absMethodDefs -> absMethodDef absMethodDefs        (55)
	absMethodDefs ->                                   (56)
	absMethodDef -> method var '(' commaParam ')' ':' type ';'   (57)
	structDef -> struct var '{' commaParam '}'         (58)
	commaParam -> param ',' commaParam                 (59)
	commaParam -> param                                (60)
	commaParam ->                                      (61)
	param -> var ':' type                              (62)
	type -> Int                                        (63)
	type -> Void                                       (64)
	type -> Boolean                                    (65)
	type -> Self                                       (66)
	type -> '(' type ')'                               (67)
	type -> '(' commaType ')' "=>" type                (68)
	type -> var                                        (69)
	commaType -> type ',' commaType                    (70)
	commaType -> type                                  (71)
	commaType ->                                       (72)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"=="           { EqualsToken }
	'='            { EqualToken }
	"!="           { NotEqualToken }
	'>'            { GreaterThanToken }
	'<'            { LessThanToken }
	'+'            { AddToken }
	'-'            { SubtractToken }
	'*'            { MultiplyToken }
	'/'            { DivideToken }
	'('            { LParenToken }
	')'            { RParenToken }
	'{'            { LBraceToken }
	'}'            { RBraceToken }
	','            { CommaToken }
	':'            { ColonToken }
	"=>"           { ArrowToken }
	';'            { SemiColonToken }
	'.'            { DotToken }
	Int            { IntToken }
	Void           { VoidToken }
	Boolean        { BooleanToken }
	if             { IfToken }
	else           { ElseToken }
	while          { WhileToken }
	return         { ReturnToken }
	println        { PrintLnToken }
	func           { FuncToken }
	true           { TrueToken }
	false          { FalseToken }
	Self           { SelfToken }
	self           { LowerCaseSelfToken }
	method         { MethodToken }
	break          { BreakToken }
	impl           { ImplToken }
	let            { LetToken }
	trait          { TraitToken }
	new            { NewToken }
	for            { ForToken }
	struct         { StructToken }
	i              { IntegerToken $$ }
	var            { IdentifierToken $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseTokens rule  0
	program         rule  1
	programItems    rules 2, 3
	stmts           rules 4, 5
	programItem     rules 6, 7, 8, 9
	exp             rule  10
	equalsExp       rules 11, 12, 13
	lessThanExp     rules 14, 15, 16
	addExp          rules 17, 18, 19
	multExp         rules 20, 21, 22
	callExp         rules 23, 24
	dotExp          rules 25, 26
	primaryExp      rules 27, 28, 29, 30, 31, 32, 33
	structActualParams rules 34, 35, 36
	structActualParam rule  37
	stmt            rules 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48
	funcDef         rule  49
	implDef         rule  50
	traitDef        rule  51
	concMethodDefs  rules 52, 53
	concMethodDef   rule  54
	absMethodDefs   rules 55, 56
	absMethodDef    rule  57
	structDef       rule  58
	commaParam      rules 59, 60, 61
	param           rule  62
	type            rules 63, 64, 65, 66, 67, 68, 69
	commaType       rules 70, 71, 72

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseTokens -> . program                     (rule 0)

	'('            reduce using rule 2
	'{'            reduce using rule 2
	if             reduce using rule 2
	while          reduce using rule 2
	return         reduce using rule 2
	println        reduce using rule 2
	func           shift, and enter state 8
	true           reduce using rule 2
	false          reduce using rule 2
	self           reduce using rule 2
	break          reduce using rule 2
	impl           shift, and enter state 9
	let            reduce using rule 2
	trait          shift, and enter state 10
	new            reduce using rule 2
	struct         shift, and enter state 11
	i              reduce using rule 2
	var            reduce using rule 2
	%eof           reduce using rule 2

	program        goto state 12
	programItems   goto state 2
	programItem    goto state 3
	funcDef        goto state 4
	implDef        goto state 5
	traitDef       goto state 6
	structDef      goto state 7

State 1

	program -> . programItems stmts                     (rule 1)

	func           shift, and enter state 8
	impl           shift, and enter state 9
	trait          shift, and enter state 10
	struct         shift, and enter state 11

	programItems   goto state 2
	programItem    goto state 3
	funcDef        goto state 4
	implDef        goto state 5
	traitDef       goto state 6
	structDef      goto state 7

State 2

	program -> programItems . stmts                     (rule 1)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41
	%eof           reduce using rule 4

	stmts          goto state 18
	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 27

State 3

	programItems -> programItem . programItems          (rule 3)

	'('            reduce using rule 2
	'{'            reduce using rule 2
	if             reduce using rule 2
	while          reduce using rule 2
	return         reduce using rule 2
	println        reduce using rule 2
	func           shift, and enter state 8
	true           reduce using rule 2
	false          reduce using rule 2
	self           reduce using rule 2
	break          reduce using rule 2
	impl           shift, and enter state 9
	let            reduce using rule 2
	trait          shift, and enter state 10
	new            reduce using rule 2
	struct         shift, and enter state 11
	i              reduce using rule 2
	var            reduce using rule 2
	%eof           reduce using rule 2

	programItems   goto state 17
	programItem    goto state 3
	funcDef        goto state 4
	implDef        goto state 5
	traitDef       goto state 6
	structDef      goto state 7

State 4

	programItem -> funcDef .                            (rule 9)

	'('            reduce using rule 9
	'{'            reduce using rule 9
	if             reduce using rule 9
	while          reduce using rule 9
	return         reduce using rule 9
	println        reduce using rule 9
	func           reduce using rule 9
	true           reduce using rule 9
	false          reduce using rule 9
	self           reduce using rule 9
	break          reduce using rule 9
	impl           reduce using rule 9
	let            reduce using rule 9
	trait          reduce using rule 9
	new            reduce using rule 9
	struct         reduce using rule 9
	i              reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 9


State 5

	programItem -> implDef .                            (rule 8)

	'('            reduce using rule 8
	'{'            reduce using rule 8
	if             reduce using rule 8
	while          reduce using rule 8
	return         reduce using rule 8
	println        reduce using rule 8
	func           reduce using rule 8
	true           reduce using rule 8
	false          reduce using rule 8
	self           reduce using rule 8
	break          reduce using rule 8
	impl           reduce using rule 8
	let            reduce using rule 8
	trait          reduce using rule 8
	new            reduce using rule 8
	struct         reduce using rule 8
	i              reduce using rule 8
	var            reduce using rule 8
	%eof           reduce using rule 8


State 6

	programItem -> traitDef .                           (rule 7)

	'('            reduce using rule 7
	'{'            reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7
	return         reduce using rule 7
	println        reduce using rule 7
	func           reduce using rule 7
	true           reduce using rule 7
	false          reduce using rule 7
	self           reduce using rule 7
	break          reduce using rule 7
	impl           reduce using rule 7
	let            reduce using rule 7
	trait          reduce using rule 7
	new            reduce using rule 7
	struct         reduce using rule 7
	i              reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 7


State 7

	programItem -> structDef .                          (rule 6)

	'('            reduce using rule 6
	'{'            reduce using rule 6
	if             reduce using rule 6
	while          reduce using rule 6
	return         reduce using rule 6
	println        reduce using rule 6
	func           reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	self           reduce using rule 6
	break          reduce using rule 6
	impl           reduce using rule 6
	let            reduce using rule 6
	trait          reduce using rule 6
	new            reduce using rule 6
	struct         reduce using rule 6
	i              reduce using rule 6
	var            reduce using rule 6
	%eof           reduce using rule 6


State 8

	funcDef -> func . var '(' commaParam ')' ':' type '{' stmts '}'    (rule 49)

	var            shift, and enter state 16


State 9

	implDef -> impl . var for type '{' concMethodDefs '}'    (rule 50)

	var            shift, and enter state 15


State 10

	traitDef -> trait . var '{' absMethodDefs '}'       (rule 51)

	var            shift, and enter state 14


State 11

	structDef -> struct . var '{' commaParam '}'        (rule 58)

	var            shift, and enter state 13


State 12

	%start_parseTokens -> program .                     (rule 0)

	%eof           accept


State 13

	structDef -> struct var . '{' commaParam '}'        (rule 58)

	'{'            shift, and enter state 70


State 14

	traitDef -> trait var . '{' absMethodDefs '}'       (rule 51)

	'{'            shift, and enter state 69


State 15

	implDef -> impl var . for type '{' concMethodDefs '}'    (rule 50)

	for            shift, and enter state 68


State 16

	funcDef -> func var . '(' commaParam ')' ':' type '{' stmts '}'    (rule 49)

	'('            shift, and enter state 67


State 17

	programItems -> programItem programItems .          (rule 3)

	'('            reduce using rule 3
	'{'            reduce using rule 3
	if             reduce using rule 3
	while          reduce using rule 3
	return         reduce using rule 3
	println        reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	self           reduce using rule 3
	break          reduce using rule 3
	let            reduce using rule 3
	new            reduce using rule 3
	i              reduce using rule 3
	var            reduce using rule 3
	%eof           reduce using rule 3


State 18

	program -> programItems stmts .                     (rule 1)

	%eof           reduce using rule 1


State 19

	stmt -> exp . ';'                                   (rule 48)

	';'            shift, and enter state 66


State 20

	exp -> equalsExp .                                  (rule 10)

	')'            reduce using rule 10
	'}'            reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10


State 21

	equalsExp -> lessThanExp . "==" lessThanExp         (rule 11)
	equalsExp -> lessThanExp . "!=" lessThanExp         (rule 12)
	equalsExp -> lessThanExp .                          (rule 13)

	"=="           shift, and enter state 64
	"!="           shift, and enter state 65
	')'            reduce using rule 13
	'}'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13


State 22

	lessThanExp -> addExp . '<' addExp                  (rule 14)
	lessThanExp -> addExp . '>' addExp                  (rule 15)
	lessThanExp -> addExp .                             (rule 16)

	"=="           reduce using rule 16
	"!="           reduce using rule 16
	'>'            shift, and enter state 62
	'<'            shift, and enter state 63
	')'            reduce using rule 16
	'}'            reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16


State 23

	addExp -> multExp . '+' multExp                     (rule 17)
	addExp -> multExp . '-' multExp                     (rule 18)
	addExp -> multExp .                                 (rule 19)

	"=="           reduce using rule 19
	"!="           reduce using rule 19
	'>'            reduce using rule 19
	'<'            reduce using rule 19
	'+'            shift, and enter state 60
	'-'            shift, and enter state 61
	')'            reduce using rule 19
	'}'            reduce using rule 19
	','            reduce using rule 19
	';'            reduce using rule 19


State 24

	multExp -> callExp . '*' callExp                    (rule 20)
	multExp -> callExp . '/' callExp                    (rule 21)
	multExp -> callExp .                                (rule 22)

	"=="           reduce using rule 22
	"!="           reduce using rule 22
	'>'            reduce using rule 22
	'<'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	';'            reduce using rule 22


State 25

	callExp -> dotExp . '(' exp ')'                     (rule 23)
	callExp -> dotExp .                                 (rule 24)

	"=="           reduce using rule 24
	"!="           reduce using rule 24
	'>'            reduce using rule 24
	'<'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'('            shift, and enter state 57
	')'            reduce using rule 24
	'}'            reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24


State 26

	dotExp -> primaryExp . '.' var                      (rule 25)
	dotExp -> primaryExp .                              (rule 26)

	"=="           reduce using rule 26
	"!="           reduce using rule 26
	'>'            reduce using rule 26
	'<'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	'.'            shift, and enter state 56


State 27

	stmts -> stmt . stmts                               (rule 5)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	'}'            reduce using rule 4
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41
	%eof           reduce using rule 4

	stmts          goto state 55
	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 27

State 28

	primaryExp -> '(' . exp ')'                         (rule 32)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 54
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 29

	stmt -> '{' . stmts '}'                             (rule 45)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	'}'            reduce using rule 4
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41

	stmts          goto state 53
	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 27

State 30

	stmt -> if . '(' exp ')' stmt else stmt             (rule 40)
	stmt -> if . '(' exp ')' stmt                       (rule 41)

	'('            shift, and enter state 52


State 31

	stmt -> while . '(' exp ')' stmt                    (rule 42)

	'('            shift, and enter state 51


State 32

	stmt -> return . exp ';'                            (rule 46)
	stmt -> return . ';'                                (rule 47)

	'('            shift, and enter state 28
	';'            shift, and enter state 49
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 48
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 33

	stmt -> println . '(' exp ')'                       (rule 44)

	'('            shift, and enter state 47


State 34

	primaryExp -> true .                                (rule 29)

	"=="           reduce using rule 29
	"!="           reduce using rule 29
	'>'            reduce using rule 29
	'<'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	'.'            reduce using rule 29


State 35

	primaryExp -> false .                               (rule 30)

	"=="           reduce using rule 30
	"!="           reduce using rule 30
	'>'            reduce using rule 30
	'<'            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	'.'            reduce using rule 30


State 36

	primaryExp -> self .                                (rule 31)

	"=="           reduce using rule 31
	"!="           reduce using rule 31
	'>'            reduce using rule 31
	'<'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	'.'            reduce using rule 31


State 37

	stmt -> break . ';'                                 (rule 43)

	';'            shift, and enter state 46


State 38

	stmt -> let . param '=' exp ';'                     (rule 38)

	var            shift, and enter state 45

	param          goto state 44

State 39

	primaryExp -> new . var '{' structActualParams '}'    (rule 33)

	var            shift, and enter state 43


State 40

	primaryExp -> i .                                   (rule 27)

	"=="           reduce using rule 27
	"!="           reduce using rule 27
	'>'            reduce using rule 27
	'<'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27
	'.'            reduce using rule 27


State 41

	primaryExp -> var .                                 (rule 28)
	stmt -> var . '=' exp ';'                           (rule 39)

	"=="           reduce using rule 28
	'='            shift, and enter state 42
	"!="           reduce using rule 28
	'>'            reduce using rule 28
	'<'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'('            reduce using rule 28
	';'            reduce using rule 28
	'.'            reduce using rule 28


State 42

	stmt -> var '=' . exp ';'                           (rule 39)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 103
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 43

	primaryExp -> new var . '{' structActualParams '}'    (rule 33)

	'{'            shift, and enter state 102


State 44

	stmt -> let param . '=' exp ';'                     (rule 38)

	'='            shift, and enter state 101


State 45

	param -> var . ':' type                             (rule 62)

	':'            shift, and enter state 100


State 46

	stmt -> break ';' .                                 (rule 43)

	'('            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	if             reduce using rule 43
	else           reduce using rule 43
	while          reduce using rule 43
	return         reduce using rule 43
	println        reduce using rule 43
	true           reduce using rule 43
	false          reduce using rule 43
	self           reduce using rule 43
	break          reduce using rule 43
	let            reduce using rule 43
	new            reduce using rule 43
	i              reduce using rule 43
	var            reduce using rule 43
	%eof           reduce using rule 43


State 47

	stmt -> println '(' . exp ')'                       (rule 44)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 99
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 48

	stmt -> return exp . ';'                            (rule 46)

	';'            shift, and enter state 98


State 49

	stmt -> return ';' .                                (rule 47)

	'('            reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	if             reduce using rule 47
	else           reduce using rule 47
	while          reduce using rule 47
	return         reduce using rule 47
	println        reduce using rule 47
	true           reduce using rule 47
	false          reduce using rule 47
	self           reduce using rule 47
	break          reduce using rule 47
	let            reduce using rule 47
	new            reduce using rule 47
	i              reduce using rule 47
	var            reduce using rule 47
	%eof           reduce using rule 47


State 50

	primaryExp -> var .                                 (rule 28)

	"=="           reduce using rule 28
	"!="           reduce using rule 28
	'>'            reduce using rule 28
	'<'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'}'            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	'.'            reduce using rule 28


State 51

	stmt -> while '(' . exp ')' stmt                    (rule 42)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 97
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 52

	stmt -> if '(' . exp ')' stmt else stmt             (rule 40)
	stmt -> if '(' . exp ')' stmt                       (rule 41)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 96
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 53

	stmt -> '{' stmts . '}'                             (rule 45)

	'}'            shift, and enter state 95


State 54

	primaryExp -> '(' exp . ')'                         (rule 32)

	')'            shift, and enter state 94


State 55

	stmts -> stmt stmts .                               (rule 5)

	'}'            reduce using rule 5
	%eof           reduce using rule 5


State 56

	dotExp -> primaryExp '.' . var                      (rule 25)

	var            shift, and enter state 93


State 57

	callExp -> dotExp '(' . exp ')'                     (rule 23)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 92
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 58

	multExp -> callExp '*' . callExp                    (rule 20)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	callExp        goto state 91
	dotExp         goto state 25
	primaryExp     goto state 26

State 59

	multExp -> callExp '/' . callExp                    (rule 21)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	callExp        goto state 90
	dotExp         goto state 25
	primaryExp     goto state 26

State 60

	addExp -> multExp '+' . multExp                     (rule 17)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	multExp        goto state 89
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 61

	addExp -> multExp '-' . multExp                     (rule 18)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	multExp        goto state 88
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 62

	lessThanExp -> addExp '>' . addExp                  (rule 15)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	addExp         goto state 87
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 63

	lessThanExp -> addExp '<' . addExp                  (rule 14)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	addExp         goto state 86
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 64

	equalsExp -> lessThanExp "==" . lessThanExp         (rule 11)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	lessThanExp    goto state 85
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 65

	equalsExp -> lessThanExp "!=" . lessThanExp         (rule 12)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	lessThanExp    goto state 84
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 66

	stmt -> exp ';' .                                   (rule 48)

	'('            reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	if             reduce using rule 48
	else           reduce using rule 48
	while          reduce using rule 48
	return         reduce using rule 48
	println        reduce using rule 48
	true           reduce using rule 48
	false          reduce using rule 48
	self           reduce using rule 48
	break          reduce using rule 48
	let            reduce using rule 48
	new            reduce using rule 48
	i              reduce using rule 48
	var            reduce using rule 48
	%eof           reduce using rule 48


State 67

	funcDef -> func var '(' . commaParam ')' ':' type '{' stmts '}'    (rule 49)

	')'            reduce using rule 61
	var            shift, and enter state 45

	commaParam     goto state 83
	param          goto state 72

State 68

	implDef -> impl var for . type '{' concMethodDefs '}'    (rule 50)

	'('            shift, and enter state 77
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 76

State 69

	traitDef -> trait var '{' . absMethodDefs '}'       (rule 51)

	'}'            reduce using rule 56
	method         shift, and enter state 75

	absMethodDefs  goto state 73
	absMethodDef   goto state 74

State 70

	structDef -> struct var '{' . commaParam '}'        (rule 58)

	'}'            reduce using rule 61
	var            shift, and enter state 45

	commaParam     goto state 71
	param          goto state 72

State 71

	structDef -> struct var '{' commaParam . '}'        (rule 58)

	'}'            shift, and enter state 122


State 72

	commaParam -> param . ',' commaParam                (rule 59)
	commaParam -> param .                               (rule 60)

	')'            reduce using rule 60
	'}'            reduce using rule 60
	','            shift, and enter state 121


State 73

	traitDef -> trait var '{' absMethodDefs . '}'       (rule 51)

	'}'            shift, and enter state 120


State 74

	absMethodDefs -> absMethodDef . absMethodDefs       (rule 55)

	'}'            reduce using rule 56
	method         shift, and enter state 75

	absMethodDefs  goto state 119
	absMethodDef   goto state 74

State 75

	absMethodDef -> method . var '(' commaParam ')' ':' type ';'    (rule 57)

	var            shift, and enter state 118


State 76

	implDef -> impl var for type . '{' concMethodDefs '}'    (rule 50)

	'{'            shift, and enter state 117


State 77

	type -> '(' . type ')'                              (rule 67)
	type -> '(' . commaType ')' "=>" type               (rule 68)

	'('            shift, and enter state 77
	')'            reduce using rule 72
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 115
	commaType      goto state 116

State 78

	type -> Int .                                       (rule 63)

	'='            reduce using rule 63
	')'            reduce using rule 63
	'{'            reduce using rule 63
	'}'            reduce using rule 63
	','            reduce using rule 63
	';'            reduce using rule 63


State 79

	type -> Void .                                      (rule 64)

	'='            reduce using rule 64
	')'            reduce using rule 64
	'{'            reduce using rule 64
	'}'            reduce using rule 64
	','            reduce using rule 64
	';'            reduce using rule 64


State 80

	type -> Boolean .                                   (rule 65)

	'='            reduce using rule 65
	')'            reduce using rule 65
	'{'            reduce using rule 65
	'}'            reduce using rule 65
	','            reduce using rule 65
	';'            reduce using rule 65


State 81

	type -> Self .                                      (rule 66)

	'='            reduce using rule 66
	')'            reduce using rule 66
	'{'            reduce using rule 66
	'}'            reduce using rule 66
	','            reduce using rule 66
	';'            reduce using rule 66


State 82

	type -> var .                                       (rule 69)

	'='            reduce using rule 69
	')'            reduce using rule 69
	'{'            reduce using rule 69
	'}'            reduce using rule 69
	','            reduce using rule 69
	';'            reduce using rule 69


State 83

	funcDef -> func var '(' commaParam . ')' ':' type '{' stmts '}'    (rule 49)

	')'            shift, and enter state 114


State 84

	equalsExp -> lessThanExp "!=" lessThanExp .         (rule 12)

	')'            reduce using rule 12
	'}'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12


State 85

	equalsExp -> lessThanExp "==" lessThanExp .         (rule 11)

	')'            reduce using rule 11
	'}'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11


State 86

	lessThanExp -> addExp '<' addExp .                  (rule 14)

	"=="           reduce using rule 14
	"!="           reduce using rule 14
	')'            reduce using rule 14
	'}'            reduce using rule 14
	','            reduce using rule 14
	';'            reduce using rule 14


State 87

	lessThanExp -> addExp '>' addExp .                  (rule 15)

	"=="           reduce using rule 15
	"!="           reduce using rule 15
	')'            reduce using rule 15
	'}'            reduce using rule 15
	','            reduce using rule 15
	';'            reduce using rule 15


State 88

	addExp -> multExp '-' multExp .                     (rule 18)

	"=="           reduce using rule 18
	"!="           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	','            reduce using rule 18
	';'            reduce using rule 18


State 89

	addExp -> multExp '+' multExp .                     (rule 17)

	"=="           reduce using rule 17
	"!="           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17


State 90

	multExp -> callExp '/' callExp .                    (rule 21)

	"=="           reduce using rule 21
	"!="           reduce using rule 21
	'>'            reduce using rule 21
	'<'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21


State 91

	multExp -> callExp '*' callExp .                    (rule 20)

	"=="           reduce using rule 20
	"!="           reduce using rule 20
	'>'            reduce using rule 20
	'<'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	')'            reduce using rule 20
	'}'            reduce using rule 20
	','            reduce using rule 20
	';'            reduce using rule 20


State 92

	callExp -> dotExp '(' exp . ')'                     (rule 23)

	')'            shift, and enter state 113


State 93

	dotExp -> primaryExp '.' var .                      (rule 25)

	"=="           reduce using rule 25
	"!="           reduce using rule 25
	'>'            reduce using rule 25
	'<'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25


State 94

	primaryExp -> '(' exp ')' .                         (rule 32)

	"=="           reduce using rule 32
	"!="           reduce using rule 32
	'>'            reduce using rule 32
	'<'            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	'.'            reduce using rule 32


State 95

	stmt -> '{' stmts '}' .                             (rule 45)

	'('            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	if             reduce using rule 45
	else           reduce using rule 45
	while          reduce using rule 45
	return         reduce using rule 45
	println        reduce using rule 45
	true           reduce using rule 45
	false          reduce using rule 45
	self           reduce using rule 45
	break          reduce using rule 45
	let            reduce using rule 45
	new            reduce using rule 45
	i              reduce using rule 45
	var            reduce using rule 45
	%eof           reduce using rule 45


State 96

	stmt -> if '(' exp . ')' stmt else stmt             (rule 40)
	stmt -> if '(' exp . ')' stmt                       (rule 41)

	')'            shift, and enter state 112


State 97

	stmt -> while '(' exp . ')' stmt                    (rule 42)

	')'            shift, and enter state 111


State 98

	stmt -> return exp ';' .                            (rule 46)

	'('            reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	if             reduce using rule 46
	else           reduce using rule 46
	while          reduce using rule 46
	return         reduce using rule 46
	println        reduce using rule 46
	true           reduce using rule 46
	false          reduce using rule 46
	self           reduce using rule 46
	break          reduce using rule 46
	let            reduce using rule 46
	new            reduce using rule 46
	i              reduce using rule 46
	var            reduce using rule 46
	%eof           reduce using rule 46


State 99

	stmt -> println '(' exp . ')'                       (rule 44)

	')'            shift, and enter state 110


State 100

	param -> var ':' . type                             (rule 62)

	'('            shift, and enter state 77
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 109

State 101

	stmt -> let param '=' . exp ';'                     (rule 38)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 108
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 102

	primaryExp -> new var '{' . structActualParams '}'    (rule 33)

	'}'            reduce using rule 34
	var            shift, and enter state 107

	structActualParamsgoto state 105
	structActualParamgoto state 106

State 103

	stmt -> var '=' exp . ';'                           (rule 39)

	';'            shift, and enter state 104


State 104

	stmt -> var '=' exp ';' .                           (rule 39)

	'('            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	if             reduce using rule 39
	else           reduce using rule 39
	while          reduce using rule 39
	return         reduce using rule 39
	println        reduce using rule 39
	true           reduce using rule 39
	false          reduce using rule 39
	self           reduce using rule 39
	break          reduce using rule 39
	let            reduce using rule 39
	new            reduce using rule 39
	i              reduce using rule 39
	var            reduce using rule 39
	%eof           reduce using rule 39


State 105

	primaryExp -> new var '{' structActualParams . '}'    (rule 33)

	'}'            shift, and enter state 137


State 106

	structActualParams -> structActualParam .           (rule 35)
	structActualParams -> structActualParam . ',' structActualParams    (rule 36)

	'}'            reduce using rule 35
	','            shift, and enter state 136


State 107

	structActualParam -> var . ':' exp                  (rule 37)

	':'            shift, and enter state 135


State 108

	stmt -> let param '=' exp . ';'                     (rule 38)

	';'            shift, and enter state 134


State 109

	param -> var ':' type .                             (rule 62)

	'='            reduce using rule 62
	')'            reduce using rule 62
	'}'            reduce using rule 62
	','            reduce using rule 62


State 110

	stmt -> println '(' exp ')' .                       (rule 44)

	'('            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	if             reduce using rule 44
	else           reduce using rule 44
	while          reduce using rule 44
	return         reduce using rule 44
	println        reduce using rule 44
	true           reduce using rule 44
	false          reduce using rule 44
	self           reduce using rule 44
	break          reduce using rule 44
	let            reduce using rule 44
	new            reduce using rule 44
	i              reduce using rule 44
	var            reduce using rule 44
	%eof           reduce using rule 44


State 111

	stmt -> while '(' exp ')' . stmt                    (rule 42)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41

	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 133

State 112

	stmt -> if '(' exp ')' . stmt else stmt             (rule 40)
	stmt -> if '(' exp ')' . stmt                       (rule 41)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41

	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 132

State 113

	callExp -> dotExp '(' exp ')' .                     (rule 23)

	"=="           reduce using rule 23
	"!="           reduce using rule 23
	'>'            reduce using rule 23
	'<'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	')'            reduce using rule 23
	'}'            reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23


State 114

	funcDef -> func var '(' commaParam ')' . ':' type '{' stmts '}'    (rule 49)

	':'            shift, and enter state 131


State 115

	type -> '(' type . ')'                              (rule 67)
	commaType -> type . ',' commaType                   (rule 70)
	commaType -> type .                                 (rule 71)

	')'            shift, and enter state 129
			(reduce using rule 71)

	','            shift, and enter state 130


State 116

	type -> '(' commaType . ')' "=>" type               (rule 68)

	')'            shift, and enter state 128


State 117

	implDef -> impl var for type '{' . concMethodDefs '}'    (rule 50)

	'}'            reduce using rule 53
	method         shift, and enter state 127

	concMethodDefs goto state 125
	concMethodDef  goto state 126

State 118

	absMethodDef -> method var . '(' commaParam ')' ':' type ';'    (rule 57)

	'('            shift, and enter state 124


State 119

	absMethodDefs -> absMethodDef absMethodDefs .       (rule 55)

	'}'            reduce using rule 55


State 120

	traitDef -> trait var '{' absMethodDefs '}' .       (rule 51)

	'('            reduce using rule 51
	'{'            reduce using rule 51
	if             reduce using rule 51
	while          reduce using rule 51
	return         reduce using rule 51
	println        reduce using rule 51
	func           reduce using rule 51
	true           reduce using rule 51
	false          reduce using rule 51
	self           reduce using rule 51
	break          reduce using rule 51
	impl           reduce using rule 51
	let            reduce using rule 51
	trait          reduce using rule 51
	new            reduce using rule 51
	struct         reduce using rule 51
	i              reduce using rule 51
	var            reduce using rule 51
	%eof           reduce using rule 51


State 121

	commaParam -> param ',' . commaParam                (rule 59)

	')'            reduce using rule 61
	'}'            reduce using rule 61
	var            shift, and enter state 45

	commaParam     goto state 123
	param          goto state 72

State 122

	structDef -> struct var '{' commaParam '}' .        (rule 58)

	'('            reduce using rule 58
	'{'            reduce using rule 58
	if             reduce using rule 58
	while          reduce using rule 58
	return         reduce using rule 58
	println        reduce using rule 58
	func           reduce using rule 58
	true           reduce using rule 58
	false          reduce using rule 58
	self           reduce using rule 58
	break          reduce using rule 58
	impl           reduce using rule 58
	let            reduce using rule 58
	trait          reduce using rule 58
	new            reduce using rule 58
	struct         reduce using rule 58
	i              reduce using rule 58
	var            reduce using rule 58
	%eof           reduce using rule 58


State 123

	commaParam -> param ',' commaParam .                (rule 59)

	')'            reduce using rule 59
	'}'            reduce using rule 59


State 124

	absMethodDef -> method var '(' . commaParam ')' ':' type ';'    (rule 57)

	')'            reduce using rule 61
	var            shift, and enter state 45

	commaParam     goto state 148
	param          goto state 72

State 125

	implDef -> impl var for type '{' concMethodDefs . '}'    (rule 50)

	'}'            shift, and enter state 147


State 126

	concMethodDefs -> concMethodDef . concMethodDefs    (rule 52)

	'}'            reduce using rule 53
	method         shift, and enter state 127

	concMethodDefs goto state 146
	concMethodDef  goto state 126

State 127

	concMethodDef -> method . var '(' commaParam ')' ':' type '{' stmts '}'    (rule 54)

	var            shift, and enter state 145


State 128

	type -> '(' commaType ')' . "=>" type               (rule 68)

	"=>"           shift, and enter state 144


State 129

	type -> '(' type ')' .                              (rule 67)

	'='            reduce using rule 67
	')'            reduce using rule 67
	'{'            reduce using rule 67
	'}'            reduce using rule 67
	','            reduce using rule 67
	';'            reduce using rule 67


State 130

	commaType -> type ',' . commaType                   (rule 70)

	'('            shift, and enter state 77
	')'            reduce using rule 72
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 142
	commaType      goto state 143

State 131

	funcDef -> func var '(' commaParam ')' ':' . type '{' stmts '}'    (rule 49)

	'('            shift, and enter state 77
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 141

State 132

	stmt -> if '(' exp ')' stmt . else stmt             (rule 40)
	stmt -> if '(' exp ')' stmt .                       (rule 41)

	'('            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	if             reduce using rule 41
	else           shift, and enter state 140
			(reduce using rule 41)

	while          reduce using rule 41
	return         reduce using rule 41
	println        reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	self           reduce using rule 41
	break          reduce using rule 41
	let            reduce using rule 41
	new            reduce using rule 41
	i              reduce using rule 41
	var            reduce using rule 41
	%eof           reduce using rule 41


State 133

	stmt -> while '(' exp ')' stmt .                    (rule 42)

	'('            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	if             reduce using rule 42
	else           reduce using rule 42
	while          reduce using rule 42
	return         reduce using rule 42
	println        reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	self           reduce using rule 42
	break          reduce using rule 42
	let            reduce using rule 42
	new            reduce using rule 42
	i              reduce using rule 42
	var            reduce using rule 42
	%eof           reduce using rule 42


State 134

	stmt -> let param '=' exp ';' .                     (rule 38)

	'('            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	if             reduce using rule 38
	else           reduce using rule 38
	while          reduce using rule 38
	return         reduce using rule 38
	println        reduce using rule 38
	true           reduce using rule 38
	false          reduce using rule 38
	self           reduce using rule 38
	break          reduce using rule 38
	let            reduce using rule 38
	new            reduce using rule 38
	i              reduce using rule 38
	var            reduce using rule 38
	%eof           reduce using rule 38


State 135

	structActualParam -> var ':' . exp                  (rule 37)

	'('            shift, and enter state 28
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 50

	exp            goto state 139
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26

State 136

	structActualParams -> structActualParam ',' . structActualParams    (rule 36)

	'}'            reduce using rule 34
	var            shift, and enter state 107

	structActualParamsgoto state 138
	structActualParamgoto state 106

State 137

	primaryExp -> new var '{' structActualParams '}' .    (rule 33)

	"=="           reduce using rule 33
	"!="           reduce using rule 33
	'>'            reduce using rule 33
	'<'            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'}'            reduce using rule 33
	','            reduce using rule 33
	';'            reduce using rule 33
	'.'            reduce using rule 33


State 138

	structActualParams -> structActualParam ',' structActualParams .    (rule 36)

	'}'            reduce using rule 36


State 139

	structActualParam -> var ':' exp .                  (rule 37)

	'}'            reduce using rule 37
	','            reduce using rule 37


State 140

	stmt -> if '(' exp ')' stmt else . stmt             (rule 40)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41

	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 153

State 141

	funcDef -> func var '(' commaParam ')' ':' type . '{' stmts '}'    (rule 49)

	'{'            shift, and enter state 152


State 142

	commaType -> type . ',' commaType                   (rule 70)
	commaType -> type .                                 (rule 71)

	')'            reduce using rule 71
	','            shift, and enter state 130


State 143

	commaType -> type ',' commaType .                   (rule 70)

	')'            reduce using rule 70


State 144

	type -> '(' commaType ')' "=>" . type               (rule 68)

	'('            shift, and enter state 77
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 151

State 145

	concMethodDef -> method var . '(' commaParam ')' ':' type '{' stmts '}'    (rule 54)

	'('            shift, and enter state 150


State 146

	concMethodDefs -> concMethodDef concMethodDefs .    (rule 52)

	'}'            reduce using rule 52


State 147

	implDef -> impl var for type '{' concMethodDefs '}' .    (rule 50)

	'('            reduce using rule 50
	'{'            reduce using rule 50
	if             reduce using rule 50
	while          reduce using rule 50
	return         reduce using rule 50
	println        reduce using rule 50
	func           reduce using rule 50
	true           reduce using rule 50
	false          reduce using rule 50
	self           reduce using rule 50
	break          reduce using rule 50
	impl           reduce using rule 50
	let            reduce using rule 50
	trait          reduce using rule 50
	new            reduce using rule 50
	struct         reduce using rule 50
	i              reduce using rule 50
	var            reduce using rule 50
	%eof           reduce using rule 50


State 148

	absMethodDef -> method var '(' commaParam . ')' ':' type ';'    (rule 57)

	')'            shift, and enter state 149


State 149

	absMethodDef -> method var '(' commaParam ')' . ':' type ';'    (rule 57)

	':'            shift, and enter state 156


State 150

	concMethodDef -> method var '(' . commaParam ')' ':' type '{' stmts '}'    (rule 54)

	')'            reduce using rule 61
	var            shift, and enter state 45

	commaParam     goto state 155
	param          goto state 72

State 151

	type -> '(' commaType ')' "=>" type .               (rule 68)

	'='            reduce using rule 68
	')'            reduce using rule 68
	'{'            reduce using rule 68
	'}'            reduce using rule 68
	','            reduce using rule 68
	';'            reduce using rule 68


State 152

	funcDef -> func var '(' commaParam ')' ':' type '{' . stmts '}'    (rule 49)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	'}'            reduce using rule 4
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41

	stmts          goto state 154
	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 27

State 153

	stmt -> if '(' exp ')' stmt else stmt .             (rule 40)

	'('            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	if             reduce using rule 40
	else           reduce using rule 40
	while          reduce using rule 40
	return         reduce using rule 40
	println        reduce using rule 40
	true           reduce using rule 40
	false          reduce using rule 40
	self           reduce using rule 40
	break          reduce using rule 40
	let            reduce using rule 40
	new            reduce using rule 40
	i              reduce using rule 40
	var            reduce using rule 40
	%eof           reduce using rule 40


State 154

	funcDef -> func var '(' commaParam ')' ':' type '{' stmts . '}'    (rule 49)

	'}'            shift, and enter state 159


State 155

	concMethodDef -> method var '(' commaParam . ')' ':' type '{' stmts '}'    (rule 54)

	')'            shift, and enter state 158


State 156

	absMethodDef -> method var '(' commaParam ')' ':' . type ';'    (rule 57)

	'('            shift, and enter state 77
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 157

State 157

	absMethodDef -> method var '(' commaParam ')' ':' type . ';'    (rule 57)

	';'            shift, and enter state 161


State 158

	concMethodDef -> method var '(' commaParam ')' . ':' type '{' stmts '}'    (rule 54)

	':'            shift, and enter state 160


State 159

	funcDef -> func var '(' commaParam ')' ':' type '{' stmts '}' .    (rule 49)

	'('            reduce using rule 49
	'{'            reduce using rule 49
	if             reduce using rule 49
	while          reduce using rule 49
	return         reduce using rule 49
	println        reduce using rule 49
	func           reduce using rule 49
	true           reduce using rule 49
	false          reduce using rule 49
	self           reduce using rule 49
	break          reduce using rule 49
	impl           reduce using rule 49
	let            reduce using rule 49
	trait          reduce using rule 49
	new            reduce using rule 49
	struct         reduce using rule 49
	i              reduce using rule 49
	var            reduce using rule 49
	%eof           reduce using rule 49


State 160

	concMethodDef -> method var '(' commaParam ')' ':' . type '{' stmts '}'    (rule 54)

	'('            shift, and enter state 77
	Int            shift, and enter state 78
	Void           shift, and enter state 79
	Boolean        shift, and enter state 80
	Self           shift, and enter state 81
	var            shift, and enter state 82

	type           goto state 162

State 161

	absMethodDef -> method var '(' commaParam ')' ':' type ';' .    (rule 57)

	'}'            reduce using rule 57
	method         reduce using rule 57


State 162

	concMethodDef -> method var '(' commaParam ')' ':' type . '{' stmts '}'    (rule 54)

	'{'            shift, and enter state 163


State 163

	concMethodDef -> method var '(' commaParam ')' ':' type '{' . stmts '}'    (rule 54)

	'('            shift, and enter state 28
	'{'            shift, and enter state 29
	'}'            reduce using rule 4
	if             shift, and enter state 30
	while          shift, and enter state 31
	return         shift, and enter state 32
	println        shift, and enter state 33
	true           shift, and enter state 34
	false          shift, and enter state 35
	self           shift, and enter state 36
	break          shift, and enter state 37
	let            shift, and enter state 38
	new            shift, and enter state 39
	i              shift, and enter state 40
	var            shift, and enter state 41

	stmts          goto state 164
	exp            goto state 19
	equalsExp      goto state 20
	lessThanExp    goto state 21
	addExp         goto state 22
	multExp        goto state 23
	callExp        goto state 24
	dotExp         goto state 25
	primaryExp     goto state 26
	stmt           goto state 27

State 164

	concMethodDef -> method var '(' commaParam ')' ':' type '{' stmts . '}'    (rule 54)

	'}'            shift, and enter state 165


State 165

	concMethodDef -> method var '(' commaParam ')' ':' type '{' stmts '}' .    (rule 54)

	'}'            reduce using rule 54
	method         reduce using rule 54


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 73
Number of terminals: 41
Number of non-terminals: 28
Number of states: 166
